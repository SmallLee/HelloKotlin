1.
var代表的是variable，声明变量,变量下面有个下划线
val定义常量，代表的是value,不可重新赋值，用来声明常量，常量没有下划线
不同的数据类型用不同的容器保存
kotlin会自动推断类型
可以用:来显示指定数据类型
2.Kotlin中没有8进制，十六进制以0x开头，二进制以0b开头

3.命令行编译kotlin
    a:下载编译工具
    b:配置bin目录到环境变量，打开控制台，
    进入需要编译的kotlin文件路径，输入kotlinc BooleanTest.kt -include-runtime -d boolean.jar
    然后运行 java -jar boolean.jar

    进入kotlin的shell
    输入kotlinc,就可以进入kotlin的Shell环境，退出使用:quit

4.函数格式
fun 函数名(参数名:参数类型):Unit{
}
参数类型可是是以下几种类型
基本类型
byte,short,int,long,float,double
字符串String
数组Array
Unit是函数的返回值，若没有返回值，可以省略Unit

5.字符串模版表达式($名称)

fun generator(name:String):String{
    return "My name is $name ,Hello $name,名字的长度是${name.length}";
}
可以使用$参数名,获得变量的值，如果要获得变量的属性，需要用大括号括起来

6.条件控制
    if...else中，如果if或者else中只有一条代码，则大括号可以省略
7.字符串比较
    在kotlin中，==等同于equals,如果要不区分大小写比较，用equals(str,boolean ignoreCase)方法

8.空处理
    //参数接受非空的值
    fun heat(str:String):String{
        return "热"+str;
    }
    heat(null)编译时报错
    要想不是非空的，可以在参数后面加一个?
    fun heat(str:String?):String{
            return "热"+str;
        }
   9.when(类似于java中的switch)
   when(变量){
        1 -> 执行语句一;
        2 -> 执行语句二;
        else -> 上面情况都不满足时执行的语句
   }

   10.区间
    1..10    [1,10]
    1 until 10   [1,10)

    11.函数表达式
        //方式一
        fun add1(x:Int,y:Int):Int = x+y;
        //方式二
        var i = {x:Int,y:Int -> x +y}
        //方式三
        var j:(Int,Int) -> Int = {x,y -> x + y}
    12.具名参数
        给函数的实参赋上形参
       默认参数
        给函数的形参附上值

    13.字符串和数字相互转化
        数字转字符串：toString
        字符串转数字：toInt

     14.变量后面跟?表示可能为空,跟!!表示一定不为

    15.异常处理
        try{
        } catch(e:Exception){
        }

     16.面向对象
        定义类的方式
        a:class 类名(属性)
        b:class 类名{
            属性
            fun 方法名(){
            }
        }

       类中的属性必须赋值，否则编译报错

     17.抽象类和接口
        抽象类代表的是事务的本质
        接口代表的是事物的功能

     通过by关键字可以实现委托和代理
     //把接口的功能实现交给by后面的对象
     class SmallHeadFather : IWashBowl by BigHeadSon()

     18.当把类的声明由class变为object时，类就变为了单例，在内存中有且只有一个

     19.定义枚举使用enum class

     20.kotlin的类可以有一个主构造函数和多个次构造函数,如果主构造函数没有注解
     和可见性修饰符修饰的话，可以省略construtor关键字

     21.初始化代码块实际上也是主构造函数的一部分，所以初始化块中的代码再次构造函数之前执行
     22.如果类没有定义任何构造函数，则默认有一个空参数的构造函数
     23.open和final关键字是对立的，如果要继承一个类，这个被继承的类需被open修饰,
     默认创建的类是final的，不能继承,

     24.子类在初始化的时候，必须先初始化父类，所以在继承父类的时候，必须保证要调用父类的
     构造函数，因为主构造函数不会默认通过super调用父类的构造函数，所以在类头上要初始化父类对喜爱那个

     25.被override修饰的方法本身就是open的，若不想被子类继承，可以使用final修饰方法

     26。重写属性
            定义变量时，open需要放到val的前面
            属性默认是final的，要重写得先加open
            var属性可以重写val的属性，但是反之不行，因为var属性多一个setter方法
            在主构造函数的参数上也可以使用override关键字重新父类属性

         子类的内部类中如何调用父类的方法
           super@子类名.父类方法

         如果一个类的父类和父接口中有相同定义的方法，那么在这个子类中调用这两个方法时，需要
         加上super<Base>.方法名();

         如果想让一个属性不能够在类的外部被赋值，可以把这个属性的set方法用private修饰
          var setVisibility: String = "abc"
             private set

         编译时常量
         const val ZIMU= "adbcdsfsdfds";//编译常量
         需要满足下面的条件：
            I.对象最外层的成员
            II.赋值为String类型或者基本数据类型
            III.没有自定义的get方法

         懒初始化属性和字段
            lateinit:非空类型，不能是基本数据类型
         可见性修饰符
            public 默认的，到处都可以访问
            protected 不能用在最外层声明
            internal  在同一个module可见
            private  私有的


        扩展
            扩展函数是静态的，也就是说扩展函数的结果取决于谁调用的他

            如果一个类中同时有相同声明的扩展函数和成员函数，那么调用时执行的是成员函数

        Companion Objects
            Companion Objects中定义的成员类似于Java中的静态成员，因为Kotlin中没有static成员

         密封类
            使用sealed class 关键字修饰类


















