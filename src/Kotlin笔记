1.
var代表的是variable，声明变量,变量下面有个下划线
val定义常量，代表的是value,不可重新赋值，用来声明常量，常量没有下划线
不同的数据类型用不同的容器保存
kotlin会自动推断类型
可以用:来显示指定数据类型
2.Kotlin中没有8进制，十六进制以0x开头，二进制以0b开头

3.命令行编译kotlin
    a:下载编译工具
    b:配置bin目录到环境变量，打开控制台，
    进入需要编译的kotlin文件路径，输入kotlinc BooleanTest.kt -include-runtime -d boolean.jar
    然后运行 java -jar boolean.jar

    进入kotlin的shell
    输入kotlinc,就可以进入kotlin的Shell环境，退出使用:quit

4.函数格式
fun 函数名(参数名:参数类型):Unit{
}
参数类型可是是以下几种类型
基本类型
byte,short,int,long,float,double
字符串String
数组Array
Unit是函数的返回值，若没有返回值，可以省略Unit

5.字符串模版表达式($名称)

fun generator(name:String):String{
    return "My name is $name ,Hello $name,名字的长度是${name.length}";
}
可以使用$参数名,获得变量的值，如果要获得变量的属性，需要用大括号括起来

6.条件控制
    if...else中，如果if或者else中只有一条代码，则大括号可以省略
7.字符串比较
    在kotlin中，==等同于equals,如果要不区分大小写比较，用equals(str,boolean ignoreCase)方法

8.空处理
    //参数接受非空的值
    fun heat(str:String):String{
        return "热"+str;
    }
    heat(null)编译时报错
    要想不是非空的，可以在参数后面加一个?
    fun heat(str:String?):String{
            return "热"+str;
        }
   9.when(类似于java中的switch)
   when(变量){
        1 -> 执行语句一;
        2 -> 执行语句二;
        else -> 上面情况都不满足时执行的语句
   }

   10.区间
    1..10    [1,10]
    1 until 10   [1,10)

    11.函数表达式
        //方式一
        fun add1(x:Int,y:Int):Int = x+y;
        //方式二
        var i = {x:Int,y:Int -> x +y}
        //方式三
        var j:(Int,Int) -> Int = {x,y -> x + y}
    12.具名参数
        给函数的实参赋上形参
       默认参数
        给函数的形参附上值

    13.字符串和数字相互转化
        数字转字符串：toString
        字符串转数字：toInt

     14.变量后面跟?表示可能为空,跟!!表示一定不为

    15.异常处理
        try{
        } catch(e:Exception){
        }

     16.面向对象
        定义类的方式
        a:class 类名(属性)
        b:class 类名{
            属性
            fun 方法名(){
            }
        }

       类中的属性必须赋值，否则编译报错

