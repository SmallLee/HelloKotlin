1.Kotlin默认会导入一些包
kotlin.*
kotlin.annotation.*
kotlin.collections.*
kotlin.comparisons.* (since 1.1)
kotlin.io.*
kotlin.ranges.*
kotlin.sequences.*
kotlin.text.*
如果在其他平台中
JVM:
java.lang.*
kotlin.jvm.*
JS:
kotlin.js.*
2.如果两个包下的类名冲突，在导入的时候可以使用as关键字区分开
import foo.Bar // Bar is accessible
import bar.Bar as bBar // bBar stands for 'bar.Bar'
kotlin没有import static

3.全局变量不管是否指定类型，必须初始化
    局部变量如果指定类型，可以不用初始化，否则也得初始化
4.kotlin中多行注释可以嵌套
5.kotlin没有三元运算符，用下面的代替
if(a>b) a else b;
//参数可以为空，下面三个❓缺一不可
6.fun parseInt(str:String?):Int?{
      return str?.toInt();
}
7.kotlin中字符串不能和其他类型数据拼接，这时候可以使用字符串模版
8.a.rangeTo(10)可以简写为a..10
9.a in b downto c,如果b小于c，则a无法获得值

10.中缀表示法调用函数，必须满足下面的条件
    a:成员函数或者是扩展函数
    b:只有一个参数
    c:使用infix关键字标记
    infix fun Int.add(x:Int):Int{
        return x+this;
    }
    调用方法
        1 add 2 或者1.add(2)
11.kotlin中有四种可见性修饰符
    private,protected,internal,public,默认是public
12.构造函数中的参数若不使用var或者val修饰，默认是val
只有主构造函数的参数可以使用var或val修饰,因为主构造函数是类头的一部分
在这里直接声明属性使得属性的声明变得很方便、简洁

13.操作变量时，和java中不同，操作的是变量隐式的get和set方法,写法如下
 var sex:Int = 0
    get() = field要
    set(value){field = value}

14.data class 用来保存数据的类，编译器会自动为我们生成一些方法
equals/hashcode/componentN(对应主构造函数的每个属性对应的值)/copy

data class类要求：
    a：主构造函数至少要有一个参数
    b:主构造函数的参数必须用var或者val修饰
    c:不能是abstract, open, sealed or inner
    d:(1.1之前)只能实现接口

copy函数的定义如下
fun copy(name: String = this.name, age: Int = this.age) = DataClass(name, age)
用法
 var dc1 = DataClass(name = "jack",age = 22);
    var oldDc = dc1.copy(name = "mike",age = 23);
    println(oldDc.name)//mike
    println(oldDc.age)//23

15.默认参数和具名参数
    默认参数：给函数的参数赋上默认的值，此时如果调用此函数，可以不给此参数赋值，此时参数取默认值
    具名参数： foo(age = 2,name = "bb");

16.属性延迟加载
    第一次调用执行lazy（）中的lambda表达式，并返回值，以后调用直接返回记录的值

17.扩展函数
扩展函数数是指在一个类上增加一种新的行为，甚至我们没有这个类代码的访问权限。
这是一个在缺少有用函数的类上扩展的方法，Kotlin能够为我们做到那些令人关注的事情，而这些Java做不到。
在Java中，通常会实现很多带有static方法的工具类，而Kotlin中扩展函数的一个优势是我们不需要在
调用方法的时候把整个对象当作参数传入，它表现得就像是属于这个类的一样，而且我们可以使用
this关键字和调用所有public方法。

18.防止空指针异常
    var data = File("aa").listFiles();
    println(data?.size)//null
    println(data?.size ?: "empty")//null

19.编码习惯
    子类型和父类之间用空格隔开，对象和类型之间不用空格
    interface Foo<out T : Any> : Bar {
        fun foo(a: Int): T
    }

    lambda中的空格
    list.filter { it > 10 }.map { element -> element * 2 }

    类头格式化
        class Person(
            id: Int,
            name: String,
            surname: String
        ) : Human(id, name) {
            // ...
        }

    Basic Syntax
    Idioms
    Coding Conventions
    Basics
    Classes and Objects
    Functions and Lambdas
    Other
    Core Libraries
    Reference
    Java Interop
    JavaScript
    Tools
    FAQ
    Full Kotlin Reference
     Edit Page
    Coding Conventions

    This page contains the current coding style for the Kotlin language.

    Naming Style

    If in doubt, default to the Java Coding Conventions such as:

    use of camelCase for names (and avoid underscore in names)
    types start with upper case
    methods and properties start with lower case
    use 4 space indentation
    public functions should have documentation such that it appears in Kotlin Doc
    Colon

    There is a space before colon where colon separates type and supertype and there's no space where colon separates instance and type:

    interface Foo<out T : Any> : Bar {
        fun foo(a: Int): T
    }
    Lambdas

    In lambda expressions, spaces should be used around the curly braces, as well as around the arrow which separates the parameters from the body. Whenever possible, a lambda should be passed outside of parentheses.

    list.filter { it > 10 }.map { element -> element * 2 }
    In lambdas which are short and not nested, it's recommended to use the it convention instead of declaring the parameter explicitly. In nested lambdas with parameters, parameters should be always declared explicitly.

    Class header formatting

    Classes with a few arguments can be written in a single line:

    class Person(id: Int, name: String)
    Classes with longer headers should be formatted so that each primary constructor argument is in a separate line with indentation. Also, the closing parenthesis should be on a new line. If we use inheritance, then the superclass constructor call or list of implemented interfaces should be located on the same line as the parenthesis:

    class Person(
        id: Int,
        name: String,
        surname: String
    ) : Human(id, name) {
        // ...
    }
    //多个父类，重启一行
    class Person(
        id: Int,
        name: String,
        surname: String
    ) : Human(id, name),
        KotlinMaker {
        // ...
    }